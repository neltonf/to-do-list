{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","userText","setUserText","setTask","task","setStatus","className","value","onChange","event","target","type","onClick","preventDefault","text","completed","id","Math","random","map","valueStatus","Todo","tasks","items","filter","el","TodoList","App","useState","status","setFilter","useEffect","statusMonitor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac801366.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = ({ userText, setUserText, setTask, task, setStatus }) => {\r\n  var options = ['ALL', 'DONE', 'REMAINING']\r\n\r\n  function inputListner(event) {\r\n    setUserText(event.target.value)\r\n  }\r\n\r\n  function inputBtnHandler(event) {\r\n    event.preventDefault()\r\n    setTask([\r\n      ...task,\r\n      {\r\n        text: userText,\r\n        completed: false,\r\n        id: Math.random() * 1000,\r\n      },\r\n    ])\r\n    setUserText('')\r\n  }\r\n\r\n  function statusFinder(event) {\r\n    setStatus(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <form className=\"form-wrapper\">\r\n      <input\r\n        className=\"form-input\"\r\n        value={userText}\r\n        onChange={inputListner}\r\n        type=\"text\"\r\n      />\r\n      <button className=\"form-btn\" onClick={inputBtnHandler} type=\"submit\">\r\n        DONE\r\n      </button>\r\n      <select className=\"form-select\" onChange={statusFinder}>\r\n        {options.map(function (valueStatus) {\r\n          return <option key={valueStatus} >{valueStatus}</option>\r\n        })}\r\n      </select>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nfunction Todo({ task, tasks, setTask }) {\r\n  const deleteBtn = () => {\r\n    setTask(tasks.filter((el) => el.id !== task.id))\r\n  }\r\n\r\n  const doneBtn = () => {\r\n    setTask(\r\n      tasks.map((items) => {\r\n        if (items.id === task.id) {\r\n          return {\r\n            ...items,\r\n            completed: !items.completed,\r\n          }\r\n        }\r\n        return items\r\n      })\r\n    )\r\n  }\r\n\r\n  return (\r\n    <span className=\"todo\">\r\n      <div className={`list-item ${task.completed ? 'completed' : ''}`}>\r\n        {task.text}\r\n      </div>\r\n      <button onClick={doneBtn} className=\"done-btn\">\r\n        DONE\r\n      </button>\r\n      <button onClick={deleteBtn} className=\"delete-btn\">\r\n        DELETE\r\n      </button>\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\n\r\nimport Todo from './Todo.js'\r\n\r\n// message values\r\n// status\r\n// id\r\n\r\nconst TodoList = ({ tasks, setTask, filter }) => {\r\n  return (\r\n    <div className=\"todo-wrapper\">\r\n      <ul className=\"list-group\">\r\n        {filter.map((task) => (\r\n          <Todo\r\n            key={task.id}\r\n            task={task}\r\n            tasks={tasks}\r\n            setTask={setTask}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\n//Component import\nimport Form from './components/Form.js'\nimport TodoList from './components/TodoList.js'\n\nfunction App() {\n  var [userText, setUserText] = useState()\n  var [task, setTask] = useState([])\n  var [status, setStatus] = useState('ALL')\n  var [filter, setFilter] = useState([])\n\n  useEffect(() => {\n    statusMonitor()\n  }, [task, status])\n\n  function statusMonitor() {\n    switch (status) {\n      case 'DONE':\n        setFilter(task.filter((items) => items.completed === true))\n        break\n      case 'REMAINING':\n        setFilter(task.filter((items) => items.completed === false))\n        break\n      default:\n        setFilter(task)\n        break\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"container-center\">\n        <header>\n          <h1>To-Do LIST</h1>\n        </header>\n        <main>\n          <Form\n            userText={userText}\n            setUserText={setUserText}\n            task={task}\n            setTask={setTask}\n            setStatus={setStatus}\n          />\n          <TodoList\n            tasks={task}\n            setTask={setTask}\n            setStatus={setStatus}\n            filter={filter}\n          />\n        </main>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}